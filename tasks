#!/usr/bin/env bash

set -Eeo pipefail

###########################
# Local Config Parameters #
###########################

AWS_DEFAULT_REGION=eu-west-2
IMAGE_REPO_NAME=deductions/pds-adaptor
export NHS_SERVICE=pds-adaptor
AWS_HELPERS_VERSION=0.2.22
echo "AWS helper scripts version: $AWS_HELPERS_VERSION"


function download_util() {
  local UTIL_VERSION=$1
  local UTIL_FILENAME=$2

  local UTIL_FILEPATH="utils/$UTIL_VERSION/$UTIL_FILENAME"

  mkdir -p "utils/$UTIL_VERSION"
  if [[ ! -f $UTIL_FILEPATH ]];then
    wget --quiet -O $UTIL_FILEPATH https://github.com/nhsconnect/prm-deductions-support-infra/releases/download/${UTIL_VERSION}/${UTIL_FILENAME}
  fi
  chmod +x $UTIL_FILEPATH

  echo "$UTIL_FILEPATH"
}


AWS_HELPERS_FILE=$(download_util $AWS_HELPERS_VERSION aws-helpers)
source $AWS_HELPERS_FILE

####################################
# Instance (Environment) Variables #
####################################

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function set_image_tag() {
  export IMAGE_TAG=$(git rev-parse HEAD | cut -c 1-8)
}

function get_aws_account_id {
    AWS_ACCOUNT_ID=$(dojo -c Dojofile-infra "aws sts get-caller-identity | jq -r .Account")
}

function configure_local_envs {
  export LOG_LEVEL=debug
  export NHS_ENVIRONMENT=local
}

function configure_local_run_against_aws_env {
  export NHS_ENVIRONMENT=${NHS_ENVIRONMENT}
  export JWT_PRIVATE_KEY=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/pds-adaptor-jwt-private-key")
  export JWT_API_KEY=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/pds-adaptor-jwt-api-key")
  export JWT_KEY_ID=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/pds-adaptor-jwt-key-id")
  export ACCESS_TOKEN_ENDPOINT=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/pds-adaptor-access-token-endpoint")
  export PDS_FHIR_ENDPOINT=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/user-input/external/pds-fhir-endpoint")
}

#######################
# Terraform Functions #
#######################

function tf_init {
  check_env
  cd terraform

  terraform init -reconfigure \
    -backend-config key="${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate" \
    -backend-config bucket="prm-deductions-${NHS_ENVIRONMENT}-terraform-state" \
    -backend-config dynamodb_table="prm-deductions-${NHS_ENVIRONMENT}-terraform-table" \
    -backend-config region=${AWS_DEFAULT_REGION}
}

function tf_plan {
  operation=$1

  if [[ -z "${GO_DEPENDENCY_LABEL_APP}" ]]; then
    set_image_tag
  else
    IMAGE_TAG=${GO_DEPENDENCY_LABEL_APP}
  fi

  tf_init

  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  tf_init
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

############################
# Docker Related Functions #
############################

function docker_login {
  echo Logging in to Amazon ECR...
  eval $(dojo -c Dojofile-infra "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

function configure_docker_repository_uri {
  docker_login
  get_aws_account_id
  export REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$IMAGE_REPO_NAME
}

function build_docker_image() {
  echo Build started on $(date)
  set_image_tag
  echo Building the Docker image...
  docker build --build-arg UTILS_VERSION=$AWS_HELPERS_VERSION -t $REPOSITORY_URI:latest -t $REPOSITORY_URI:$IMAGE_TAG .
  echo Build completed on `date`
}

function test_performance() {
  export AWS_DEFAULT_REGION
  virtualenv virtualenv_performance
  source virtualenv_performance/bin/activate

  pip install -r ./src/performance/requirements.txt

  mkdir -p build/test-results/performance/
  mkdir -p build/reports/performance/

  if [[ ! -z $TURN_ON_DEBUG ]]; then
    echo Turning on noisy debug output
    DEBUG_PARAM='--loglevel=DEBUG'
  fi

  RESOLVED_USERS="${USERS:=10}"
  RESOLVED_RUN_TIME="${RUN_TIME:=60s}"
  TARGET_HOST="https://pds-adaptor.$NHS_ENVIRONMENT.non-prod.patient-deductions.nhs.uk"

  echo Running perf tests with $RESOLVED_USERS users for $RESOLVED_RUN_TIME against $TARGET_HOST

  locust --locustfile="./src/performance/test_performance.py" \
      --users=$RESOLVED_USERS \
      --csv="build/test-results/performance/perf" \
      --html="build/reports/performance/report.html" \
      --headless \
      --run-time=$RESOLVED_RUN_TIME \
      $DEBUG_PARAM \
      --only-summary \
      --host=$TARGET_HOST

  deactivate
}

function fetch_redaction_utils() {
  download_util $AWS_HELPERS_VERSION run-with-redaction.sh
  download_util $AWS_HELPERS_VERSION redactor
}

###########
## TASKS ##
###########

command="$1"
case "${command}" in
  fetch_utils)
      fetch_redaction_utils
      ;;
  build_docker)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _build"
      configure_docker_repository_uri
      fetch_redaction_utils
      build_docker_image
      echo "Pushing the Docker image... $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG"
      docker push $REPOSITORY_URI:$IMAGE_TAG
      ;;
  _build)
      rm -rf build/
      gradle assemble
      ;;
  build)
      dojo "./tasks _build"
      ;;
  _test_unit)
      gradle test
      ;;
  test_unit)
      configure_local_envs
      dojo "./tasks _test_unit"
      ;;
  test_unit_cached)
      configure_local_envs
      dojo -c Dojofile-cached "./tasks _test_unit"
      ;;
  _test_integration)
      gradle --info integration
      ;;
  test_integration)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _test_integration"
      ;;
  _test_performance)
        _assume_environment_role $NHS_ENVIRONMENT
        test_performance
        ;;
  test_performance)
        check_env
        dojo -c Dojofile-python "./tasks _test_performance"
        ;;
  _test_coverage)
      gradle jacocoTestCoverageVerification
      ;;
  test_coverage)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _test_coverage"
      ;;
  _code_quality)
      gradle check -x test -x integration
      ;;
  code_quality)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _code_quality"
      ;;
  _test_all)
    gradle test integration jacocoTestCoverageVerification check
    ;;
  test_all)
    configure_local_envs
    dojo -c Dojofile-itest "./tasks _test_all"
    ;;
  run_local)
    configure_local_envs
    ./gradlew bootRun
    ;;
  run_local_against_aws_env)
    configure_local_run_against_aws_env
    ./gradlew bootRun
    ;;
  _dep)
      gradle dependencyCheckAnalyze
      ;;
  dep)
      dojo "./tasks _dep"
      ;;
  tf)
      check_env
      dojo -c Dojofile-infra "./tasks _tf"
      ;;
  _tf)
      tf_init
      bash
      ;;
  _tf_plan)
      _assume_environment_role $NHS_ENVIRONMENT
      tf_plan "$2"
      ;;
  tf_plan)
      check_env
      dojo -c Dojofile-infra "./tasks _tf_plan $2"
      ;;
  _tf_apply)
      _assume_environment_role $NHS_ENVIRONMENT
      tf_apply
      ;;
  tf_apply)
      check_env
      dojo -c Dojofile-infra "./tasks _tf_apply"
      ;;
  promote_docker_image)
      check_env
      set_image_tag
      promote_docker_image "$IMAGE_REPO_NAME:$IMAGE_TAG" "$NHS_ENVIRONMENT"
      ;;
  _wait_ecs)
      _assume_environment_role $NHS_ENVIRONMENT
      aws ecs wait services-stable \
        --region $AWS_DEFAULT_REGION \
        --cluster $NHS_ENVIRONMENT-${NHS_SERVICE}-ecs-cluster \
        --service $NHS_ENVIRONMENT-${NHS_SERVICE}-service
      ;;
  wait_ecs)
      check_env
      dojo -c Dojofile-infra "./tasks _wait_ecs"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
